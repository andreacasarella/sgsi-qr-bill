"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pt2pc = exports.in2pc = exports.mm2pc = exports.cm2pc = exports.pc2pt = exports.in2pt = exports.mm2pt = exports.cm2pt = exports.pc2in = exports.pt2in = exports.mm2in = exports.cm2in = exports.pc2mm = exports.pt2mm = exports.in2mm = exports.cm2mm = exports.pc2cm = exports.pt2cm = exports.in2cm = exports.mm2cm = exports.px2pc = exports.pc2px = exports.px2pt = exports.pt2px = exports.px2in = exports.in2px = exports.px2mm = exports.mm2px = exports.px2cm = exports.cm2px = exports.calc = void 0;
function calc(expression, unit = "px") {
    const expressionWithoutUnits = convertAbsoluteUnitsInStringToPixels(expression);
    const sanitizedExpression = expressionWithoutUnits.replace(/[^-()\d/*+.]/g, "");
    const result = +eval(sanitizedExpression);
    switch (unit) {
        case "cm":
            return px2cm(result);
        case "mm":
            return px2mm(result);
        case "in":
            return px2in(result);
        case "pt":
            return px2pt(result);
        case "pc":
            return px2pc(result);
        case "px":
            return result;
    }
}
exports.calc = calc;
function convertAbsoluteUnitsInStringToPixels(value) {
    const replaceAt = (content, search, index, replace) => {
        return content.substr(0, index) + replace + content.substr(index + search.length);
    };
    const regex = /(-?\d*\.?\d+)(mm|cm|in|pt|pc|px)+/g;
    let match;
    while ((match = regex.exec(value)) !== null) {
        switch (match[2]) {
            case "cm":
                value = replaceAt(value, match[0], match.index, cm2px(+match[1]) + "");
                break;
            case "mm":
                value = replaceAt(value, match[0], match.index, mm2px(+match[1]) + "");
                break;
            case "in":
                value = replaceAt(value, match[0], match.index, in2px(+match[1]) + "");
                break;
            case "pt":
                value = replaceAt(value, match[0], match.index, pt2px(+match[1]) + "");
                break;
            case "pc":
                value = replaceAt(value, match[0], match.index, pc2px(+match[1]) + "");
                break;
            case "px":
                value = replaceAt(value, match[0], match.index, +match[1] + "");
                break;
        }
    }
    return value;
}
function cm2px(centimeters) {
    return centimeters * 9600 / 254;
}
exports.cm2px = cm2px;
function px2cm(pixels) {
    return pixels * 254 / 9600;
}
exports.px2cm = px2cm;
function mm2px(millimeters) {
    return millimeters * 960 / 254;
}
exports.mm2px = mm2px;
function px2mm(pixels) {
    return pixels * 254 / 960;
}
exports.px2mm = px2mm;
function in2px(inches) {
    return inches * 960;
}
exports.in2px = in2px;
function px2in(pixels) {
    return pixels / 960;
}
exports.px2in = px2in;
function pt2px(points) {
    return points * 4 / 3;
}
exports.pt2px = pt2px;
function px2pt(pixels) {
    return pixels / 4 * 3;
}
exports.px2pt = px2pt;
function pc2px(picas) {
    return picas * 16;
}
exports.pc2px = pc2px;
function px2pc(pixels) {
    return pixels / 16;
}
exports.px2pc = px2pc;
//-- cm
function mm2cm(millimeters) {
    return px2cm(mm2px(millimeters));
}
exports.mm2cm = mm2cm;
function in2cm(inches) {
    return px2cm(in2px(inches));
}
exports.in2cm = in2cm;
function pt2cm(points) {
    return px2cm(pt2px(points));
}
exports.pt2cm = pt2cm;
function pc2cm(picas) {
    return px2cm(pc2px(picas));
}
exports.pc2cm = pc2cm;
//-- mm
function cm2mm(centimeters) {
    return px2mm(cm2px(centimeters));
}
exports.cm2mm = cm2mm;
function in2mm(inches) {
    return px2mm(in2px(inches));
}
exports.in2mm = in2mm;
function pt2mm(points) {
    return px2mm(pt2px(points));
}
exports.pt2mm = pt2mm;
function pc2mm(picas) {
    return px2mm(pc2px(picas));
}
exports.pc2mm = pc2mm;
//-- in
function cm2in(centimeters) {
    return px2in(cm2px(centimeters));
}
exports.cm2in = cm2in;
function mm2in(millimeters) {
    return px2in(mm2px(millimeters));
}
exports.mm2in = mm2in;
function pt2in(points) {
    return px2in(pt2px(points));
}
exports.pt2in = pt2in;
function pc2in(picas) {
    return px2in(pc2px(picas));
}
exports.pc2in = pc2in;
//-- pt
function cm2pt(centimeters) {
    return px2pt(cm2px(centimeters));
}
exports.cm2pt = cm2pt;
function mm2pt(millimeters) {
    return px2pt(mm2px(millimeters));
}
exports.mm2pt = mm2pt;
function in2pt(inches) {
    return px2pt(in2px(inches));
}
exports.in2pt = in2pt;
function pc2pt(picas) {
    return px2pt(pc2px(picas));
}
exports.pc2pt = pc2pt;
//-- pc
function cm2pc(centimeters) {
    return px2pc(cm2px(centimeters));
}
exports.cm2pc = cm2pc;
function mm2pc(millimeters) {
    return px2pc(mm2px(millimeters));
}
exports.mm2pc = mm2pc;
function in2pc(inches) {
    return px2pc(in2px(inches));
}
exports.in2pc = in2pc;
function pt2pc(picas) {
    return px2pc(pt2px(picas));
}
exports.pt2pc = pt2pc;
//# sourceMappingURL=calc.js.map